Node JS: 
Single Threaded? Event loop and architecture?
How to allow CORS in Express 
Autho vs Auth 
Status Err codes 
process.exit() 
Middleware
Create a simple server in Node.js (Practical)
How to Config properties in Express JS
What is the use of next in Express JS
app.get(
  '/next', function (req,res,next) { 
    console.log('hi there ');
    next();
    console.log('you are still here');
  }
)
  
// API for the testing of return next() 
app.get(
  '/return-next', function (req,res,next) { 
    console.log('hi there');
    return next(); 
    console.log('you are still here');
  }
)

HTTP methods? PUT | POST / PUT vs PATCH HTTP Methods
Explain the purpose of ExpressJS package? => Routing, Middleware, Template Engines, Static File Serving, Error Handling, Session Management
Differentiate between spawn(), spawnSync() and fork() methods in Node.js?
	Streams in node js will process the file or other network sockets or http requests in chunks instead of processing at the same time
fork() => method is part of the child_process module and is used to create a new Node.js process that runs a module as a separate child process 
Cluster: => Fork the process and create the multiple servers based on no of CPUs available in the system. This is used to fully occupy the CPU cores and space of a multicore system. 
Master and worker processes can send messages to each other using worker.send(message) and process.on('message', callback)
spawn(): => spawn is like a fork that is created as a separate process but along with command to execute as a separate process. The commands could be ls, dir, cp, copy, npm, git, echo, cd

const cluster = require('cluster');
const http = require('http');
const numCPUs = require('os').cpus().length;

if (cluster.isMaster) {
  console.log(`Master ${process.pid} is running`);

  // Fork worker processes based on the number of CPU cores
  for (let i = 0; i < numCPUs; i++) {
    cluster.fork();
  }

  // Handle worker process events
  cluster.on('exit', (worker, code, signal) => {
    console.log(`Worker ${worker.process.pid} died`);
  });
} else {
  // Worker processes create HTTP server and handle requests
  http.createServer((req, res) => {
    res.writeHead(200);
    res.end('Hello, World!\n');
  }).listen(8000);

  console.log(`Worker ${process.pid} started`);
}

Functions having Higher Priority:
1. process.nextTick
2. Promise.resolve
3. setTimeout
4. setImmediate
process.nextTick() is a special function that allows you to schedule a callback function to be invoked in the next iteration of the event loop, immediately after the current operation completes. It's often used to defer the execution of a function until the current call stack has cleared, allowing for more efficient asynchronous programming.

Scale Node JS Application: Vertical Scaling (Upgrading Hardware), Horizontal Scaling (), Load Balancing (distribute incoming requests across multiple instances of your Node.js application), 
Babel-loader: Babel is a toolchain that is mainly used to convert ECMAScript 2015+ code into a backwards-compatible version of JavaScript that can be run in older browsers or environments
Babel Presets:
* @babel/preset-env: Automatically determines the Babel plugins and polyfills you need based on your target browser environments or Node.js version.
* @babel/preset-react: Adds support for JSX and other React-related synta

webpack webpack-cli: packages used to bundle node js based on the configurations written in webpack.config.js

Microservice Architecture => High Cohesive (all code base in a single place) and Loosely coupled (they can be communicated with each other)
It can be communicated within itself using GraphQL, REST APIs, Event Driven Architecture, Kafka, RabbitMQ

Cross-browser development=> It refers to the practice of creating web applications or websites that work consistently across different web browsers.
Singleton design pattern => It is allowing only one instance of the class. If we try to create 2nd instance it will again return the first instance if already have it. It will use only first instances class variable even though you call it with second instance. Refer code in javascript-demo
Use purpose of Singleton design pattern => Global State Management (t can hold and manage global state variables, configurations, or resources), Resource Sharing (It facilitates sharing of resources such as database connections, file system access, network connections, and other expensive resources)
Promise.all() => When one rejects all of it will be rejected. It will wait for other promise to be fulfilled.
Promise.allSettled() => If any promise rejected then everything will not be rejected. Fulfilled promise will be resolved and failed promise will be rejected. It is useful when one promise result is independent with other. Response will be in a single array with each Promise value in different objects.
Promise.race(): It will take array of promises and return only one promise which is resolved first.
Lexical Scope: JavaScript follows a lexical scoping model, meaning that the scope of a variable is determined by its location within the code at the time of its declaration.

Solid Principle: 
Single Responsibility Principle (SRP):
* In Node.js, this principle can be applied to functions, modules, or classes. Each should have a single responsibility or concern.
Open - Closed Principle (OCP)
	Open for extension and Closed for Modification. In Node.js, this means that existing code should be extendable without modifying it.
Liskov Substitution Principle (LSP):
	In Node.js, this principle ensures that derived classes can be substituted for their base classes without altering the correctness of the program. It's about maintaining the expected behavior when swapping one implementation for another.
Interface Segregation Principle (ISP):
	In Node.js, this principle encourages creating smaller, specific interfaces rather than large, general ones. It helps in keeping modules or classes focused and prevents clients from depending on methods they don't need.
Dependency Inversion Principle (DIP):
	High-level modules should not depend on low-level modules. Both should depend on abstractions.

Streams: writing to a source in a continuous fashion, chunk by chunk
Set delay on Kafka: You can delay Kafka message by sending acknowledgement to the producers through the message consumer.commitOffsets
 Key features of Playwright:
		•	Cross-browser support
* Headless and headful modes
* Granular control over browser behavior
* Support for parallel execution
* Built-in support for waiting for elements and network requests
 "selectors" in Playwright:
	Includes CSS selectors, XPath, and text selectors, page.$(), page.$$(), and page.waitForSelector() to find elements using selectors

ChildProcess Module: Using child process module in Node JS you can fork or spawn the existing process and run any background task parallely. It may not create a new process like cluster but it will split the existing process (run as the sub process) to execute any independent code asynchronously like Kafka, Cron Job etc., 

Cluster vs Child Process Difference: In cluster each worker process serves incoming HTTP requests independently whereas whereas child process is used to Child processes are commonly used for tasks such as executing shell commands, running background tasks, processing large datasets in parallel, or executing code in different programming languages.

Clustering is a technique used to horizontally scale a Node.js server on a single machine by spawning child processes (workers) that run concurrently and share a single port. It distributes the incoming connections across all the available worker processes so that available CPU cores are utilized to their full potential. It uses Round Robin approach to distribute tasks among workers.

Chaining in Node JS: Chaining in Node.js typically refers to chaining asynchronous operations together in a readable and concise manner. This is often done using promises or async/await syntax.

Design Pattern in Node JS: (  https://medium.com/@techsuneel99/design-patterns-in-node-js-31211904903e)
	Singleton Pattern: The Singleton pattern ensures that a class has only one instance and provides a global point of access to it.  For instance, a database connection pool can be implemented as a singleton to prevent resource wastage.
	Factory Pattern: The Factory pattern offers a way to create objects without specifying the exact class of object that will be created. By abstracting object creation, the Factory pattern enhances code readability and reusability. In a Node.js context, this can simplify object creation, especially when dealing with asynchronous operations such as reading files or making API calls.
	Observer Pattern:  This pattern involves a Class that maintains a list of its dependents, called observers, and notifies them of any state changes. In the context of Node.js, this can be leveraged to build event-driven systems, such as real-time applications and chat applications.
	Middleware Pattern: 
	Module Pattern
	Decorator Pattern: Decorators dynamically add new functionality to objects without affecting other instances. This is ideal for extending core modules in Node.
	Promise pattern
	Dependency Injection:  design pattern to facilitate loose coupling between components and improve code maintainability, scalability, and testability.rather than a component creating its dependencies directly, the dependencies are provided (injected) from external sources. Constructor Injection, Property Injection:, Method Injection:


PUT vs POST: Put is idempotent meaning that multiple identical requests should have the same effect as a single request, POST is non-idempotent. PUT cache the response, POST can’t cache the response.
Cookies vs Session storage: Cookies are smaller storage and it is sent to server for every request and it’s data persists in browser. Session storage are larger and will vanish if the URL is closed.

Secure an API:
1. HTTPS/TLS, Encrypt Sensitive Data
2. Rate Limiting, Throttling - limit the no of data a client can send or receive to protect against excessive use
3. Validate Input to avoid SQL injection, cross-site scripting
4. CORS Policies
5. Logging and Monitoring


LLD involves Module Structure, API Interaction (Gateways and Services), Data Processing (Model - Business Logic), Error Handling, Dependencies, Testing
HLD: System Architecture (MVC, Microservices Architecture), Components and Modules (interfaces between components and the interactions between them), Data Flow and Control Flow, External Interfaces, Deployment Architecture, Performance and Scalability, Error Handling and Logging, Testing and Quality Assurance

https://anywhere.epam.com/en/blog/advanced-node-js-interview-questions-answers
https://www.simplilearn.com/tutorials/nodejs-tutorial/nodejs-interview-questions - Advanced Node JS

Redis: Redis refers to an open-source, in-memory data store that is commonly used as a database, cache, and message broker.
How redis is working fast: In-Memory Storage-RAM, Data Structures - Optimized Data Structures like strings, lists, sets, sorted sets, hashes, bitmaps, and hyperloglogs, Single-Threaded Design, Non-blocking I/O, Persistence Options like Snapshots (RDB) - Redis can take point-in-time snapshots of the dataset and save them to disk. This operation is performed in the background without blocking the main thread. Append-Only File (AOF) - Redis can log every write operation to an append-only file, which can be replayed to rebuild the dataset, Memory Optimization -Redis uses efficient data encoding techniques to minimize memory usage. For example, small integers are encoded in a compact format. 

async_hooks: Async Hooks is a feature in Node.js that allows developers to monitor the lifetime of asynchronous resources such as Promises, Timers. It provides a set of hooks that enable you to track the creation, execution, and destruction of asynchronous resources within your Node.js applications.

Libuv is a multi-platform C library that provides support for asynchronous I/O based on event loops and file-system and Timers and Event Handling. Event Loop: The event-driven architecture that allows Node.
ThreadPool: The thread pool in Node.js is implemented using the libuv library. A thread pool is a group of worker threads separate from the main event loop thread Node.js uses to execute JavaScript code and handle requests. They are used to perform certain types of tasks that can be slow and blocking, such as reading or writing to a file, performing cryptographic functions, etc. 
The default size of the thread pool varies depending on the version of Node.js and the platform (operating system).
As of recent versions of Node.js, the default size of the thread pool is typically around 4 threads per CPU core. Thread poolside can be changed in Node js env file UV_THREADPOOL_SIZE=8

Worker processes are instances of the same Node.js application (the same script file). Each worker runs in its own process, utilizing a separate CPU core.
The master process manages communication with worker processes. It distributes incoming connections (or tasks) among workers using a round-robin algorithm by default.Workers can communicate with the master process and with each other using inter-process communication (IPC) mechanisms provided by Node.js, such as process.send() and process.on('message', handler).

Global Exception in Node JS: (1) Process-wide 'uncaughtException' Event: Node.js provides a process-wide event called 'uncaughtException', which is emitted when an unhandled exception occurs in your application. process.on('uncaughtException', (err) => {})
(2)'unhandledRejection' Event:  Similarly, Node.js provides an event called 'unhandledRejection', which is emitted when a Promise is rejected but no catch handler is attached to handle the rejection. process.on('unhandledRejection', (reason, promise) => {})
Block event loop in Node JS: Infinite Loop, Synchronous File Read, Blocking with CPU-Intensive Computation, Blocking with child_process (Child process runs as the separate process, but if it takes expensive computation and CPU utilisation then main thread will lag)

Disadvantages of Microprocessor: Increased Complexity, Distributed System, Data Consistency, Configuration Management, End-to-End Testing, Redundancy, Versioning (Managing dependencies and ensuring compatibility between different versions of services can be challenging), Library and Framework Upgrades

Session-based Authentication: As usual user is authenticated in server, once authenticated session id is created for the particular user with basic details like user name and email. The session id is sent in response set-cookie to set in cookie as http only. Next time when API hit, session id is sent over cookie in http request and it’s expiry time is validated in server. Session in server is configured such as it’s expiry time is saved. So each session’s expiry time is validated.  app.use(session({
  secret: 'your-secret-key',
  resave: false,
  saveUninitialized: false,
  cookie: {
    secure: true, // Set to true if using HTTPS
    maxAge: 24 * 60 * 60 * 1000 // Session expiry time (24 hours)
  }
}));
Oath: OAuth (Open Authorization) is a standard protocol for authorization that allows users to grant third-party websites or applications limited access to their resources without sharing their credentials directly. Use Cases: (1) Third-Party Authentication, (2) API Authorization, (3) Single Sign-On (SSO) OAuth Flow: (1) Authorization Request (2) User Authentication (3) Authorization Grant (4)Access Token Request (5)Access Token Issuance (6)Access Protected Resources

Webpack Bundle Configurations:
	Entry File, Output folder, Loaders (Transformations applied to the source code of modules. They preprocess files as they are imported. Common loaders include babel-loader for JavaScript/JSX and css-loader for CSS files.),  HtmlWebpackPlugin (Uses: Automatic HTML File Generation like dynamic changing of HTML templates in React JS, Script Injection, Template Handling like EJS, Pug, or a simple HTML file, Minification), Mode (Specifies the mode in which Webpack runs. It can be either development or production, development mode is optimized for debugging and fast build times., production mode is optimized for performance and smaller bundle sizes)


HTTPS: 
1. Browser connects to a web server (website) secured with SSL (https). Browser requests the server identify itself.
2. Server sends a copy of its SSL Certificate, including the server's public key.
3. Browser checks the certificate root against a list of trusted CAs and make sure the certificate is unexpired, unrevoked, and its common name is valid for the websiUKte that it is connected to. If the browser trusts the certificate, it creates, encrypts, and sends back a symmetric session key using the server's public key.
4. Server decrypts the symmetric session key using its private key and sends back an acknowledgement encrypted with the session key to start the encrypted session.
5. Server and Browser now encrypt all transmitted data with the session key.

TCP												HTTPS
Transport Layer									Application Layer Establishes connection using 3 way handshake		HTTPS is built over TCP which ensures encryption using public key and create session key and decryption using private key and all after
SYN, SYN-ACK, ACK								three way of handshake