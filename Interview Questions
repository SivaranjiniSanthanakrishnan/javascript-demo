QUESTIONS 2:

How to store files in mongodb
How to install diff versions of node



08:30 - 10:30


Javascript:

How js works? Is it framework or library? 
What search engine? Callback functions, call stack? 
Ways to create Object => Constructor, Object.create, Object.assign, Normal Object creation, copy object using spread operator
Different types of functions | Advantages of IIFE
	Function Declaration
	Function Expression
	Arrow Function
	IIFE
	Recursive Function
	Generator Function
	Constructor Function
Explain "this" keyword accessibility
Immutable datatype | Mutable datatypes
Promises vs Callbacks 
setTimeOut vs setInterval Eg
Closures Eg 
Real time eg: Imagine a web page where you can click a button to load and display user data from an API. Each time you click the button, new data is fetched and displayed. The function definition of that button returns the async function of the API call and previously maintains the count of no of calls. The count var act as the closure property and each time that return function is called the value of the count var is preserved. Benefits of Using Closures: (1) State Preservation (2) Encapsulation.  
Real time use case of Closure:
1. Data encapsulation and private variables
2. Event handlers with preserved state
		function createGreeter(name) {
 			function greet() {
			    console.log("Hello, " + name + "!");
		  }

 		 return greet;
		}

		const button1 = document.getElementById("button1");
		const button2 = document.getElementById("button2");

		button1.addEventListener("click", createGreeter("Alice"));
		button2.addEventListener("click", createGreeter("Bob"));

		// Clicking button1 or button2 will now log the corresponding greeting message
3.  Modules and function currying
4. Memoization : The cached value is stored in the lexical scope and when again the same function is called with the same variable the cached value will have value hence need not to call the inner return function again to calculate complex variable.
5. Namespaces and avoiding variable collisions
6. Iterators and generators
7. Function factories with configuration
8. Debouncing and throttling user input
https://medium.com/deno-the-complete-reference/10-use-cases-of-closures-in-javascript-98fe0eab36db

Call, Apply and Bind Eg
Use strict 
Variable Hoisting : let and const also will be hoisted but it remains un-initialized, whereas var will bw initialised with undefined once hoisted. Since let and const is un-initialized, it will throw reference error before accessing the element.
Spread operator Eg
Immediately Invoked Function
What is localStorage and sessionStorage?
Web socket
	The WebSocket object provides the API for creating and managing a WebSocket connection to a server, as well as for sending and receiving data on the connection. To construct a WebSocket , use 	the WebSocket() constructor
drawbacks of cookies
		Browser Impacts. Cookies are not restricted based on internet usage
		Security Risks. Since cookies are stored in the hard drive as text files, it posses some serious security risks
		Size Limitations. Size limitations also exist on cookies.
		Privacy Concerns
		Manual Disabling
Geolocation API - getCurrentPosition(), watchPosition(), clearPosition()
DOM manipulation overcome 
Snippets 


Adv Javascript:
How javascript internally works
What are all the ways to create obj in javascript 
Variable Hoisting // Snippet
What is getter and setter, why do we want to use getter and setter incase if we have functions?
Advantages of arrow functions
Advantages of using class and object, Real time use case of class-
1. Encapsulate  related data and behavior into a single entity
2. Class Inheritance and Reusability:
3. Abstraction
4. Modularity and Reusability
Event Propogation:
Throatling - Throttling limits the number of times a function is called over a specified period. Subsequent events that occur within the interval are ignored until the interval has elapsed.
Debouncing - When an event occurs, the event handler function is not immediately invoked. Instead, a timer is started, and the function is scheduled to execute after the specified delay.
Difference between function declaration and function expression
concept of prototypal inheritance in JavaScript
JavaScript handle memory management and garbage collection
	It stores data in two memory spaces, the Stack and the Heap. The stack is used to store static data, whereas the heap is used to store dynamic data. The stack contains references to the objects in a heap. JavaScript also uses a garbage collector to deallocate unused memory from the heap. The mark and sweep technique is one of the most common garbage collection algorithms.
Event Bubbling
Event Propagation
Debouncing:
	A Debounce function is a higher-order function that returns another function, to create closure around the function parameters (func, timeout) and the timer variable. Delay the operation which is written on the event for the certain period of time to avoid continuous execution of that operation. 
Function Currying
Memoization in JS:
	Memoization is an optimization technique used to improve the performance of functions by caching the results of expensive function calls and returning the cached result when the same inputs occur again. Cache the result of an recursive function, with its parameter as the cache keyword. (cache[param]). If same parameter again comes then we can return the result from cache.
Memization (cache in js) can be achieved using HOF (higher order functions). Check memoization in JS with fibnocci series as example.
Side Effects: Refers to any changes that a function makes outside of its scope, particularly changes to the state of variables or objects outside of the function's local scope. These changes could include performing I/O operations such as writing to the console or modifying the DOM in a web environment.
Generic: You can define functions that work with any data type using generics. This allows you to write functions that are type-safe and reusable across different types.



React JS:
How will you reuse a component ?
Virtual DOM.
Why React? 
Second argument that can optionally be passed to useState?
Second argument that can optionally be passed to useEffect?
What ll you choose? Class or Functional Component
Purpose of super(props) in constructor?
useEffect => ComponentDidUnMount (Practical)
Difference between export default vs export 
HOC : Real time scenario  => logging, error handling, or performance tracking, Encapsulation of Behavior, Separation of Concerns
Pure Components vs Components
Context API's : Alternative for Redux => Avoid Props Drilling, Properties like theme colour if changes in one place it will be automatically consumed in all places
how to communicate the parent component from child component => Callback Functions, useRef
Write Class Component skeleton (Practical)
Write Controlled Form with one field (Practical)
Diff between browser router and hash router
Thunk
How can we prevent loading of large amount of data in a HomeComponent Ans : (Redux)
Snippets
How to handle token in Front end
Redux: Predictable State Management, Centralized State, Consistency Across Environments,  Managing complex state in large applications, Server-side Rendering, 
How SSR (Server Side Render) Works in React: (1) Request to Server (2) Render on Server (3) Send HTML to Client (4) Hydration 
Benefits of SSR : (1) Improved SEO (2) Faster Initial Load (3) Social Media Sharing
How useContext with useReducer is replacement of Redux? => useReducer will provide state and dispatch, we can pass this state and dispatch via provider from the home component to all child components, Hence the child components if want to do some operation it can consume dispatch operation. This workflow is used is less complex applications. This doesn’t support middleware like thunk.
Reat 18 features:
1. Concurrent Rendering : const [isPending, startTransition] = useTransition();
2. Automatic Batching of Updates => Don’t re-render continuously for two continuous state updates
3.  useServerData custom react hook => will fetch the data from cache based on key if already available instead of doing API call
4. Improved Suspense API => Gives the fallback params where we can place loader until promise resolves.
5. Built-in Transitions and Animations
Redux toolkit
How will you make state variables as mutable in Redux => Using produce function from immer library, or you can copy the state object directly and make changes. 
	By default Redux behaves Im-mutably and changing it to mutably may lead to performance, debugging issues. Can’t maintain ore and next state etc., 
	Changing it to mutably means updating the state value directly and returning in reducer without making it copy
How will you optimise project? - Code Splitting (Suspense API, Lazy loading), useTransition, Redux, useMemo, useCallback, Webpack Bundle Analyzer (Checks which module occupies more size in bundle using graph, chart etc., ), Automatic batching updates, Tree Shaking Difficulties faced on Project? 
How will you prevent multiple re-rendering in React JS? 

React.StrictMode ? - (1) Identify and warn about deprecated methods, (2) Warn about multiple re-rendering happens through API call, (3) It warns about the usage of legacy string refs (ref="myRef") instead of callback refs (ref={myRef => this.myRef = myRef}), which are the recommended approach for accessing DOM elements in modern React applications
Get prev State of state variable, It will warn about the case sensitivity of event handlers,(5) warn about unsafe practice such as API call directly inside render method.

How will you handle error in another way? - Having Error Boundary Component, it will catch error using the lifecycle method called componentDidCatch. Error Boundary Component is wrapped around component and if any error occurs at the child component, it will start propagate searching for nearest componentDidCatch and it will render that error component’s UI. 

Service Worker in React JS:
A service worker is a type of web worker that acts as a programmable proxy between your web application and the network. It runs in the background, separate from the main browser thread, and can intercept network requests, cache resources, and provide offline support for web applications. It can be implemented using create react app automatically or by manual integration by adding window.addEventListener('load', manual integration. 
Service Worker are used to Background Processing, Network Interception, Offline Support, Push Notifications and Progressive Web Apps (PWAs)
useRef: Used to take reference of either child component or any html tag to access it’s element. If it is a reference of Child component, then all the values and html tags of child component can be accessible in parent
useRef along with forwardRef: forwardRef is a wrapper function or HOC in child component which forward’s the child component’s elements to the parent component. Parent component access it’s element using useRef. The diff bet. Prev and this is, in case of forward Ref, we will get the ref as props from parent component, and we could choose which element could be referred from the child component by referring the element with the ref props. 

Ready 18 Hooks: 
* useImperativeHandle - useImperativeHandle is a React hook that allows you to customize the value that is exposed by a component when it is used with ref. It is particularly useful when you're working with functional components and you want to expose only certain methods or properties of the component's instance to its parent component.
* useLayoutEffect - useLayoutEffect is a React Hook that is similar to useEffect, but it runs synchronously after all DOM mutations. This makes it suitable for operations that need to be performed after the DOM has been updated but before the browser paints the screen.
* useDebugValue - useDebugValue is a React Hook used for debugging purposes. It allows you to display custom labels for custom hooks in React DevTools. This can be helpful when you're working with custom hooks and want to provide additional information about their state or behavior. Eg.,   useDebugValue(loading ? 'Loading...' : `Data: ${data}`); before returning hook
* useDeferredValue - It allows you to delay updating a value until a specified time has passed, enabling smoother transitions and better performance by deferring less critical updates.
This hook is particularly useful for optimizing user interfaces and prioritizing updates based on their importance. By deferring less critical updates, you can ensure that more critical updates are processed first, leading to a more responsive and efficient user experience.
	const [text, setText] = useState('');
	  const deferredText = useDeferredValue(text, { timeoutMs: 1000 });
  	const handleChange = (event) => {
    		setText(event.target.value);
  	};
* useTransition
* useId - Custom hook which we can use to create unique id fr either different components or html tag elements or elements inside loop. Uniqueness of the id is maintained by taking previous reference of the value. 
React.memo() is an alternative for shouldComponentUpdate in functional component: If you wrap your functional component inside React.memo() whenever you update state variable in functional component if it’s value doesn’t change then the component won’t be re-rendered. This simulates the behaviour of shouldComponentUpdate.
useRef()
If a reducer dispatches an action in Redux, it would lead to an infinite loop or a stack overflow error. If a reducer dispatches an action, it would disrupt this flow and cause an infinite loop because each dispatched action would trigger the reducer again, leading to another dispatch, and so on.
useMemo vs useCallback: useMemo is used for memoizing the result of a computation, while useCallback is used for memoizing a function instance. They both accept an array of dependencies as the second argument to determine when to recalculate or recreate the memoized value or function.
Microfrontend: Microfrontends is an architectural style where a front-end application is decomposed into individual, semi-independent "micro" applications, each responsible for a specific feature or section of the overall UI. Implementation Strategy can either be  Build-Time Integration or Run-Time Integration. Implementation example: 1. Using iframes, 2. Single SPA, 3. Module Federation (Webpack 5) - ModuleFederationPlugin. It can be communicated using  Custom Events, Shared State (Using a shared state management solution like Redux or Context API), 


Node JS: 
Single Threaded? Event loop and architecture?
How to allow CORS in Express 
Autho vs Auth 
Status Err codes 
process.exit() 
Middleware
Create a simple server in Node.js (Practical)
How to Config properties in Express JS
What is the use of next in Express JS
app.get(
  '/next', function (req,res,next) { 
    console.log('hi there ');
    next();
    console.log('you are still here');
  }
)
  
// API for the testing of return next() 
app.get(
  '/return-next', function (req,res,next) { 
    console.log('hi there');
    return next(); 
    console.log('you are still here');
  }
)

HTTP methods? PUT | POST / PUT vs PATCH HTTP Methods
Explain the purpose of ExpressJS package? => Routing, Middleware, Template Engines, Static File Serving, Error Handling, Session Management
Differentiate between spawn(), spawnSync() and fork() methods in Node.js?
	Streams in node js will process the file or other network sockets or http requests in chunks instead of processing at the same time
fork() => method is part of the child_process module and is used to create a new Node.js process that runs a module as a separate child process 
Cluster: => Fork the process and create the multiple servers based on no of CPUs available in the system. This is used to fully occupy the CPU cores and space of a multicore system. 

const cluster = require('cluster');
const http = require('http');
const numCPUs = require('os').cpus().length;

if (cluster.isMaster) {
  console.log(`Master ${process.pid} is running`);

  // Fork worker processes based on the number of CPU cores
  for (let i = 0; i < numCPUs; i++) {
    cluster.fork();
  }

  // Handle worker process events
  cluster.on('exit', (worker, code, signal) => {
    console.log(`Worker ${worker.process.pid} died`);
  });
} else {
  // Worker processes create HTTP server and handle requests
  http.createServer((req, res) => {
    res.writeHead(200);
    res.end('Hello, World!\n');
  }).listen(8000);

  console.log(`Worker ${process.pid} started`);
}

Functions having Higher Priority:
1. process.nextTick
2. Promise.resolve
3. setImmediate
4. setTimeout
process.nextTick() is a special function that allows you to schedule a callback function to be invoked in the next iteration of the event loop, immediately after the current operation completes. It's often used to defer the execution of a function until the current call stack has cleared, allowing for more efficient asynchronous programming.

Scale Node JS Application: Vertical Scaling (Upgrading Hardware), Horizontal Scaling (), Load Balancing (distribute incoming requests across multiple instances of your Node.js application), 
Babel-loader: Babe is a toolchain that is mainly used to convert ECMAScript 2015+ code into a backwards-compatible version of JavaScript that can be run in older browsers or environments
webpack webpack-cli: packages used to bundle node js based on the configurations written in webpack.config.js

Microservice Architecture => High Cohesive (all code base in a single place) and Loosely coupled (they can be communicated with each other)
It can be communicated within itself using GraphQL, REST APIs, Event Driven Architecture, Kafka, RabbitMQ

Cross-browser development=> It refers to the practice of creating web applications or websites that work consistently across different web browsers.
Singleton design pattern => It is allowing only one instance of the class. If we try to create 2nd instance it will again return the first instance if already have it. It will use only first instances class variable even though you call it with second instance. Refer code in javascript-demo
Use purpose of Singleton design pattern => Global State Management (t can hold and manage global state variables, configurations, or resources), Resource Sharing (It facilitates sharing of resources such as database connections, file system access, network connections, and other expensive resources)
Promise.all() => When one rejects all of it will be rejected. It will wait for other promise to be fulfilled.
Promise.allSettled() => If any promise rejected then everything will not be rejected. Fulfilled promise will be resolved and failed promise will be rejected. It is useful when one promise result is independent with other. Response will be in a single array with each Promise value in different objects.
Promise.race(): It will take array of promises and return only one promise which is resolved first.
Lexical Scope: JavaScript follows a lexical scoping model, meaning that the scope of a variable is determined by its location within the code at the time of its declaration.

Solid Principle: 
Single Responsibility Principle (SRP):
* In Node.js, this principle can be applied to functions, modules, or classes. Each should have a single responsibility or concern.
Open/Closed Principle (OCP)
	In Node.js, this means that existing code should be extendable without modifying it.
Liskov Substitution Principle (LSP):
	In Node.js, this principle ensures that derived classes can be substituted for their base classes without altering the correctness of the program. It's about maintaining the expected behavior when swapping one implementation for another.
Interface Segregation Principle (ISP):
	In Node.js, this principle encourages creating smaller, specific interfaces rather than large, general ones. It helps in keeping modules or classes focused and prevents clients from depending on methods they don't need.
Dependency Inversion Principle (DIP):
	High-level modules should not depend on low-level modules. Both should depend on abstractions.

Streams: writing to a source in a continuous fashion, chunk by chunk
Set delay on Kafka: You can delay Kafka message by sending acknowledgement to the producers through the message consumer.commitOffsets
 Key features of Playwright:
		•	Cross-browser support
* Headless and headful modes
* Granular control over browser behavior
* Support for parallel execution
* Built-in support for waiting for elements and network requests
 "selectors" in Playwright:
	Includes CSS selectors, XPath, and text selectors, page.$(), page.$$(), and page.waitForSelector() to find elements using selectors

ChildProcess Module: Using child process module in Node JS you can fork or spawn the existing process and run any background task parallely. It may not create a new process like cluster but it will split the existing process (run as the sub process) to execute any independent code asynchronously like Kafka, Cron Job etc., 

Cluster vs Child Process Difference: In cluster each worker process serves incoming HTTP requests independently whereas whereas child process is used to Child processes are commonly used for tasks such as executing shell commands, running background tasks, processing large datasets in parallel, or executing code in different programming languages.

Clustering is a technique used to horizontally scale a Node.js server on a single machine by spawning child processes (workers) that run concurrently and share a single port. It distributes the incoming connections across all the available worker processes so that available CPU cores are utilized to their full potential. It uses Round Robin approach to distribute tasks among workers.

Chaining in Node JS: Chaining in Node.js typically refers to chaining asynchronous operations together in a readable and concise manner. This is often done using promises or async/await syntax.

Design Pattern in Node JS: (  https://medium.com/@techsuneel99/design-patterns-in-node-js-31211904903e)
	Singleton Pattern: The Singleton pattern ensures that a class has only one instance and provides a global point of access to it.  For instance, a database connection pool can be implemented as a singleton to prevent resource wastage.
	Factory Pattern: The Factory pattern offers a way to create objects without specifying the exact class of object that will be created. By abstracting object creation, the Factory pattern enhances code readability and reusability. In a Node.js context, this can simplify object creation, especially when dealing with asynchronous operations such as reading files or making API calls.
	Observer Pattern:  This pattern involves a Class that maintains a list of its dependents, called observers, and notifies them of any state changes. In the context of Node.js, this can be leveraged to build event-driven systems, such as real-time applications and chat applications.
	Middleware Pattern: 
	Module Pattern
	Decorator Pattern: Decorators dynamically add new functionality to objects without affecting other instances. This is ideal for extending core modules in Node.
	Promise pattern
	Dependency Injection:  design pattern to facilitate loose coupling between components and improve code maintainability, scalability, and testability.rather than a component creating its dependencies directly, the dependencies are provided (injected) from external sources. Constructor Injection, Property Injection:, Method Injection:


PUT vs POST: Put is idempotent meaning that multiple identical requests should have the same effect as a single request, POST is non-idempotent. PUT cache the response, POST can’t cache the response.
Cookies vs Session storage: Cookies are smaller storage and it is sent to server for every request and it’s data persists in browser. Session storage are larger and will vanish if the URL is closed.
LLD involves Module Structure, API Interaction (Gateways and Services), Data Processing (Model - Business Logic), Error Handling, Dependencies, Testing
HLD: System Architecture (MVC, Microservices Architecture), Components and Modules (interfaces between components and the interactions between them), Data Flow and Control Flow, External Interfaces, Deployment Architecture, Performance and Scalability, Error Handling and Logging, Testing and Quality Assurance

https://anywhere.epam.com/en/blog/advanced-node-js-interview-questions-answers
https://www.simplilearn.com/tutorials/nodejs-tutorial/nodejs-interview-questions - Advanced Node JS

Redis: Redis refers to an open-source, in-memory data store that is commonly used as a database, cache, and message broker.
async_hooks: Async Hooks is a feature in Node.js that allows developers to monitor the lifetime of asynchronous resources such as Promises, Timers. It provides a set of hooks that enable you to track the creation, execution, and destruction of asynchronous resources within your Node.js applications.
Libuv is a multi-platform C library that provides support for asynchronous I/O based on event loops and file-system and Timers and Event Handling. Event Loop: The event-driven architecture that allows Node.
Global Exception in Node JS: (1) Process-wide 'uncaughtException' Event: Node.js provides a process-wide event called 'uncaughtException', which is emitted when an unhandled exception occurs in your application. process.on('uncaughtException', (err) => {})
(2)'unhandledRejection' Event:  Similarly, Node.js provides an event called 'unhandledRejection', which is emitted when a Promise is rejected but no catch handler is attached to handle the rejection. process.on('unhandledRejection', (reason, promise) => {})

Database:
1. Types of Indexes in MongoDB:
	Single Field Index: Single field indexes collect and sort data from a single field in each document in a collection.
	Compound Index: Compound indexes collect and sort data from two or more fields in each document in a collection. Data is grouped by the first field in the index and then by each subsequent field.
	Multikey Index: Multikey indexes collect and sort data stored in arrays. MongoDB automatically sets the index to be a multikey index.
	Text Index: Text indexes support text search queries on fields containing string content.  Text indexes improve performance when searching for specific words or phrases within string content.
		db.<collection>.createIndex(
   		{
      			<field1>: "text",
      			<field2>: "text",
     		 .	..
   		}
		)
	Hashed Index: Hashed indexes collect and store hashes of the values of the indexed field.
	TTL (Time-To-Live) Index: A TTL index automatically removes documents from a collection after a certain amount of time.
2. Types of Indexes in MySql:
	Single-Column Index
	Composite Index (Multi-Column Index)
	Unique Index
	Primary Key Index
	Hash Index
3. Clustered Index: Only one that is primary key index. Rows are actually arranged in the order or index key. Used to select the specific row using where cond.
4. Non-cluster Index: All indexes other than PK index. Maintains it’s own Data structures to retrieve the data. Filtering, Sorting all actions are done using non-clustered index, DS actions.
￼
Index Performance in DB: Index value can either stored in B-tree with a balanced tree structure or in a Hash table which store the indexed column values in a hash table data structure. When the query is executed, For B-tree indexes, MySQL typically performs a binary search or similar algorithm to quickly find the index value in tree, For hash indexes, MySQL performs a hash lookup operation. Once the index is found it will fetch it’s corresponding row or document from its reference without scanning the entire table. 

Two index in DB: If there are two indexes then each index will take its referenced value and finally the results will be merged and fetched

Difference between SP and functions: 
	1. Transaction Control will be available in SP but not in Functions, 
    2. SP accept input, output parameters, functions accept only input parameters
    3. Functions can be called anywhere like Select statement, where condition etc., SP can be called individually or via code
    4. SP can modify the data in DB, functions don’t have control over the database

Replica in MongoDB: Replica is duplicating same data across multiple servers. It will take multiple copies across servers. Replica provides 24*7 availability of data. Protection from single server loss, hardware failures and service interruptions. Ensures that data is available to every client. MongoDB structure consists of one primary node and that primary node is connected with multiple secondary nodes. All read/write operations are performed in the primary node and it is updated in secondary node every time. Primary node will send heartbeat signal to all secondary nodes periodically. If secondary node didn’t receive signal then the primary node is considered as failure and any one of the secondary node elects any one of them as primary. If the failed primary node rollbacked again, then it will act as the secondary node. A replica set requires min. Of 3 nodes including primary node and max of 50 nodes. Advantages: Replication helps in disaster recovery and backup of data, Improve application reliability, Replication minimises downtime for maintenance, Load balancing is achieved. Disadvantages: Higher cost and time constraints, Redundant data is stored so more space and server processing is required.  
The mongos acts as a query router, providing an interface between client applications and the sharded cluster. Config servers store metadata and configuration settings for the cluster. As of MongoDB 3.4, config servers must be deployed as a replica set (CSRS). MongoDB uses the shard key to distribute the collection's documents across shards. The shard key consists of a field or multiple fields in the documents.

Partitioning in MySQL is used to split or partition the rows of a table into separate tables in different locations, but still, it is treated as a single table. It distributes the portions of the table's data across a file system based on the rules we have set as our requirement. Horizontal Partitioning (rows) Vertical Partitioning (columns-mysql doesn’t support). 
Types: 1. RANGE Partitioning 2. LIST Partitioning 3. HASH Partitioning (In other words, it splits the table as of the value returned by the user-defined expression. It is mainly used to distribute data evenly into the partition. It is performed with the PARTITION BY HASH(expr) clause.) 4. Partition by Key : It is similar to the HASH partitioning where the hash partitioning uses the user-specified expression, and MySQL server supplied the hashing function for key


AWS:
Lamda: It allows you to run code without provisioning or managing servers. You simply upload your code, and Lambda takes care of everything required to run and scale your code with high availability. Serverless Computing, Auto-Scaling, Pay-per-Use Pricing Model, Integration with Other AWS Services
	When Triggered: Lambda functions are triggered by various events such as changes to data in Amazon S3 buckets, updates to DynamoDB tables, HTTP requests via API Gateway, or custom events sent from other AWS services or your own applications.
"ghcr" stands for GitHub Container Registry. It is a Docker container registry provided by GitHub, allowing users to store, manage, and distribute Docker images within the GitHub ecosystem.



Check with answers of athaenahealth questions


libuv , Thread pools in Node JS
TechStacks used and Why
Go through project structure diagram
Redis 
Review PDF-gen code
Screenshots
Oath

Error handling middleware
Change in mui 

Best practices
Repository pattern
React Router - Transfer data from one component to another component
How to handle and save tokens at the server side
Slack integration 


Web hooks
Nginx, reverse proxy, your domain is hosted at a particular port how will you proxy your server to the particular domain

Https, secured, 



Const can be changed in obj, if so diff between let and const

Global exception handle in node js